name: Pterodactyl wings

on:
  workflow_dispatch:

permissions:
  actions: write
  contents: write

concurrency:
  group: Pterodactyl wings
  cancel-in-progress: true

jobs:
  wings:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    steps:
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
          
      - name: Download latest /var/lib/pterodactyl backup parts from Releases
      continue-on-error: true
      uses: robinraju/release-downloader@v1.11
      with:
        tag: backups
        fileName: "var-lib-pterodactyl-us-node-1.part*.tar.gz"
        out-file-path: "."

    - name: Restore /var/lib/pterodactyl
      run: |
        if ls var-lib-pterodactyl-us-node-1.part*.tar.gz 1> /dev/null 2>&1; then
          echo "‚úÖ Found multipart backup files. Combining and restoring..."
          cat var-lib-pterodactyl-us-node-1.part*.tar.gz > var-lib-pterodactyl.tar.gz
          sudo mkdir -p /var/lib/
          sudo rm -rf /var/lib/pterodactyl
          sudo tar --same-owner -xzf var-lib-pterodactyl.tar.gz -C /var/lib
          echo "‚úÖ Restored /var/lib/pterodactyl successfully."
          sudo ls -R /var/lib/pterodactyl || true
        else
          echo "‚ö†Ô∏è No var-lib-pterodactyl-us-node-1.part*.tar.gz found. Using fresh /var/lib/pterodactyl."
        fi
          
      - name: Wings Config
        run: |
          sudo su
          mkdir -p /etc
          cd etc
          mkdir -p pterodactyl
          cd pterodactyl
          wget https://raw.githubusercontent.com/KSWarrior/H/refs/heads/main/config.yml
          
      - name: Start wings
        run: |
          mkdir -p pterodactyl/wings
          cd pterodactyl/wings
          wget https://raw.githubusercontent.com/KSWarrior/H/refs/heads/main/docker-compose.yml
          docker-compose up -d
        
      # 11. Run LocalTunnel (keep alive)
      - name: Cloudflare Tunnel
        run: |
          curl -LO https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64
          chmod +x cloudflared-linux-amd64
          sudo mv cloudflared-linux-amd64 /usr/local/bin/cloudflared
          cloudflared --version
          sudo cloudflared service install eyJhIjoiZTJkZjY3MDI5ZWZlZTBmY2JhM2ExMjNjN2VmNTcxNTAiLCJ0IjoiZjg0NThiMjEtM2IwOS00ZmY0LThiNDMtMjcwMmEzNjQ1NmU4IiwicyI6Ik9ERXpOVGhtT0RndE9UQXhOUzAwTURZNExXSTVOamN0WXpNNU9UQXpOVFE0WkdFMCJ9
          
     # 6. Keep Panel Alive
      - name: Start Tmate (for debug - non-blocking)
        if: always()
        run: |
          set -euo pipefail
          curl -sL https://github.com/tmate-io/tmate/releases/latest/download/tmate-2.4.0-static-linux-amd64.tar.xz | tar -xJ
          sudo mv tmate-2.4.0-static-linux-amd64/tmate /usr/local/bin/ || true
          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready
          tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}' || true
          sleep 500
          
      - name: Sleep for 20000s
        run: |
          sleep 20000
                     
      - name: Backup /var/lib/pterodactyl into multipart files
      if: always()
      run: |
        echo "üì¶ Creating multipart backup of /var/lib/pterodactyl..."
        sudo tar --exclude='pterodactyl/tmp/*' --exclude='pterodactyl/cache/*' -czf - -C /var/lib pterodactyl | split -b 500M - var-lib-pterodactyl-us-node-1.part
        ls -lh var-lib-pterodactyl-us-node-1.part*

    - name: Delete old /var/lib/pterodactyl backup assets
      if: always()
      run: |
        echo "üóëÔ∏è Deleting old multipart assets from release..."
        assets=$(gh release view backups --json assets --jq '.assets[].name' || echo "")
        for asset in $assets; do
          if [[ "$asset" == var-lib-pterodactyl-us-node-1.part* ]]; then
            gh release delete-asset backups "$asset" -y || true
            echo "‚úÖ Deleted old asset: $asset"
          fi
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload multipart backup files to GitHub Release
      if: always()
      uses: softprops/action-gh-release@v1
      with:
        tag_name: backups
        name: "Latest /var/lib/pterodactyl Multipart Backup"
        body: "/var/lib/pterodactyl backup (multipart)"
        files: var-lib-pterodactyl-us-node-1.part*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Restart Workflow
        if: always()
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Pterodactyl wings
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}
